Description: Deploys the Lambda and EC2 instances for pog
Parameters:
  Environment:
    Description: A designation for this environment, e.g., 'prod'
    Type: String
  Vpc:
    Description: The vpc to deploy the lambda
    Type: String
  S3Bucket:
    Description: The S3 bucket containing the lambda binaries
    Type: String
  ServerBinaryKey:
    Description: The S3 key to the pog_server binary
    Type: String
  ClientBinaryKey:
    Description: The S3 key to the pog_client binary
    Type: String
  PrivateSubnetIds:
    Description: The subnet ids for the server lambda
    Type: List<AWS::EC2::Subnet::Id>
  DbHost:
    Description: The host address for the database
    Type: String
  DbName:
    Description: The name for the database
    Type: String
  DbUserName:
    Description: username for the database
    Type: String
#  TODO: move to secret manager
  DbPassword:
    Description: password for the database
    Type: String
  DiscordApplicationId:
    Description: Discord application id
    Type: String
  DiscordPublicKey:
    Description: Discord public key
    Type: String
  #  TODO: move to secret manager
  DiscordApplicationToken:
    Description: Discord application auth token
    Type: String
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64'
  Ec2IamInstanceProfile:
    Description: IAM instance profile for use with the gateway EC2 instance (requires S3 read and lambda:InvokeFunction)
    Type: String
  #  TODO: move to secret manager
  GeminiToken:
    Description: Gemini API token
    Type: String

Resources:
  ServerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - lambda:InvokeAsync
                  - lambda:InvokeFunction
                Resource: arn:aws:lambda:*:*:*
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                Resource: "*"
  ClientLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                Resource: "*"
  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join [ '-', [ !Ref "AWS::StackName", "server-sg" ] ]
      GroupDescription: "Serverless security group"
      VpcId: !Ref Vpc
      SecurityGroupEgress:
        IpProtocol: "-1"
        CidrIp: 0.0.0.0/0

  ClientLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join [ '-', [ !Ref "AWS::StackName", "client" ] ]
      Runtime: provided.al2
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Ref ClientBinaryKey
      Handler: index.handler
      MemorySize: 128
      Timeout: 5
      Role: !GetAtt ClientLambdaRole.Arn
      Environment:
        Variables:
          DISCORD_APPLICATION_ID: !Ref DiscordApplicationId
          DISCORD_TOKEN: !Ref DiscordApplicationToken
          ENVIRONMENT: !Ref Environment
  ClientFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ClientLambda
      Action: lambda:InvokeFunction
      Principal: lambda.amazonaws.com

  ServerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join [ '-', [ !Ref "AWS::StackName", "server" ] ]
      Runtime: provided.al2
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Ref ServerBinaryKey
      Handler: index.handler
      MemorySize: 128
      Timeout: 5
      Role: !GetAtt ServerLambdaRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref ServerSecurityGroup
        SubnetIds: !Ref PrivateSubnetIds
      Environment:
        Variables:
          DB_HOST: !Ref DbHost
          DB_NAME: !Ref DbName
          CLIENT_LAMBDA: !Ref ClientLambda
          DISCORD_APPLICATION_ID: !Ref DiscordApplicationId
          DISCORD_PUBLIC_KEY: !Ref DiscordPublicKey
          DB_USER: !Ref DbUserName
          DB_PASS: !Ref DbPassword
          DISCORD_TOKEN: !Ref DiscordApplicationToken
          ENVIRONMENT: !Ref Environment
  ServerFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ServerLambda
      FunctionUrlAuthType: 'NONE'
      Action: lambda:InvokeFunctionUrl
      Principal: '*'
  ServerFunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      InvokeMode: BUFFERED
      TargetFunctionArn: !Ref ServerLambda

#  GatewayTemplate:
#    Type: AWS::EC2::LaunchTemplate
#    Properties:
#      LaunchTemplateName: !Join [ '-', [ !Ref "AWS::StackName", "gateway" ] ]
#      LaunchTemplateData:
#        ImageId: ami-05d38da78ce859165
#        InstanceType: t3.micro
#        IamInstanceProfile:
#          Name: !Ref Ec2IamInstanceProfile
#        KeyName: pog-gateway-test
#        MetadataOptions:
#          HttpTokens: optional
#        UserData:
#          Fn::Base64:
#            !Sub
#              - |
#                #!/bin/bash
#                sudo apt update && sudo apt upgrade -y
#                snap install aws-cli --classic
#
#                aws s3 cp s3://${S3Bucket}/pog/${Environment}/gateway /home/ubuntu/gateway
#                chown ubuntu:ubuntu /home/ubuntu/gateway
#                chmod 744 /home/ubuntu/gateway
#
#                cat << SERVICE > /etc/systemd/system/gateway.service
#                [Unit]
#                Description=POG gateway service (demo)
#                After=network.target
#                StartLimitIntervalSec=0
#
#                [Service]
#                Type=simple
#                Restart=always
#                RestartSec=1
#                User=ubuntu
#                ExecStart=/home/ubuntu/gateway
#                StandardOutput=append:/home/ubuntu/data.log
#                StandardError=append:/home/ubuntu/error.log
#                Environment="DISCORD_APPLICATION_ID=${DiscordApplicationId}"
#                Environment="APPLICATION_TOKEN=${DiscordApplicationToken}"
#                Environment="GEMINI_TOKEN=${GeminiToken}"
#                Environment="CLIENT_LAMBDA=${PogClientLambda}"
#                Environment="ENVIRONMENT=${Environment}"
#
#                [Install]
#                WantedBy=multi-user.target
#                SERVICE
#
#                chmod 777 /etc/systemd/system/gateway.service
#                systemctl start gateway
#                systemctl enable gateway
#                reboot now
#              - PogClientLambda: !Join [ '-', [ !Ref "AWS::StackName", "client" ] ]
#        SecurityGroupIds:
#          - sg-0946f92ca0f5d71c5
#  GatewayAutoscaler:
#    Type: AWS::AutoScaling::AutoScalingGroup
#    Properties:
#      LaunchTemplate:
#        LaunchTemplateId: !Ref GatewayTemplate
#        Version: !GetAtt GatewayTemplate.LatestVersionNumber
#      MaxSize: '1'
#      MinSize: '1'
#      AvailabilityZones:
#        - us-west-2a
#        - us-west-2b
#      #      VPCZoneIdentifier: !Ref Subnets
#      Tags:
#        - Key: "Name"
#          Value: !Join [ '-', [ !Ref "AWS::StackName", "gateway" ] ]
#          PropagateAtLaunch: true

Outputs:
  ServerFunctionUrl:
    Description: Interactions endpoint url
    Value: !Join [ '', [ !GetAtt "ServerFunctionUrl.FunctionUrl", "interactions" ] ]
